"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3081],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,m=c["".concat(s,".").concat(k)]||c[k]||d[k]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},94407:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={description:"Dkron supports automatic cluster joining using cloud metadata on various providers."},s="Cloud Auto-join",p={unversionedId:"usage/cloud-auto-join",id:"usage/cloud-auto-join",title:"Cloud Auto-join",description:"Dkron supports automatic cluster joining using cloud metadata on various providers.",source:"@site/docs/usage/cloud-auto-join.md",sourceDirName:"usage",slug:"/usage/cloud-auto-join",permalink:"/docs/usage/cloud-auto-join",editUrl:"https://github.com/distribworks/dkron/tree/main/website/docs/docs/usage/cloud-auto-join.md",tags:[],version:"current",frontMatter:{description:"Dkron supports automatic cluster joining using cloud metadata on various providers."},sidebar:"tutorialSidebar",previous:{title:"Job chaining",permalink:"/docs/usage/chaining"},next:{title:"Clustering",permalink:"/docs/usage/clustering"}},u={},d=[{value:"Amazon EC2",id:"amazon-ec2",level:3},{value:"Authentication &amp; Precedence",id:"authentication--precedence",level:4},{value:"Microsoft Azure",id:"microsoft-azure",level:3},{value:"Google Compute Engine",id:"google-compute-engine",level:3},{value:"Authentication &amp; Precedence",id:"authentication--precedence-1",level:4},{value:"IBM SoftLayer",id:"ibm-softlayer",level:3},{value:"Aliyun (Alibaba Cloud)",id:"aliyun-alibaba-cloud",level:3},{value:"Digital Ocean",id:"digital-ocean",level:3},{value:"Openstack",id:"openstack",level:3},{value:"Scaleway",id:"scaleway",level:3},{value:"Joyent Triton",id:"joyent-triton",level:3},{value:"vSphere",id:"vsphere",level:3},{value:"Packet",id:"packet",level:3},{value:"Kubernetes (k8s)",id:"kubernetes-k8s",level:3}],c={toc:d};function k(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cloud-auto-join"},"Cloud Auto-join"),(0,i.kt)("p",null,"As of Dkron 2.0.0, ",(0,i.kt)("inlineCode",{parentName:"p"},"retry-join")," accepts a unified interface using the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hashicorp/go-discover"},"go-discover")," library for doing\nautomatic cluster joining using cloud metadata. To use retry-join with a\nsupported cloud provider, specify the configuration on the command line or\nconfiguration file as a ",(0,i.kt)("inlineCode",{parentName:"p"},"key=value key=value ...")," string."),(0,i.kt)("p",null,"If the values contain spaces, equals, backslashes or double quotes then\nthey need to be double quoted and the usual escaping rules apply."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ dkron agent --retry-join 'provider=my-cloud config=val config2=\"some other val\" ...'\n")),(0,i.kt)("p",null,"or via a configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join": ["provider=my-cloud config=val config2=\\"some other val\\" ..."]\n')),(0,i.kt)("p",null,"The cloud provider-specific configurations are detailed below. This can be\ncombined with static IP or DNS addresses or even multiple configurations\nfor different providers."),(0,i.kt)("p",null,"In order to use discovery behind a proxy, you will need to set\n",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP_PROXY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTPS_PROXY")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"NO_PROXY")," environment variables per\n",(0,i.kt)("a",{parentName:"p",href:"https://golang.org/pkg/net/http/#ProxyFromEnvironment"},"Golang ",(0,i.kt)("inlineCode",{parentName:"a"},"net/http")," library"),"."),(0,i.kt)("p",null,"The following sections give the options specific to each supported cloud\nprovider."),(0,i.kt)("h3",{id:"amazon-ec2"},"Amazon EC2"),(0,i.kt)("p",null,"This returns the first private IP address of all servers in the given\nregion which have the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=aws tag_key=... tag_value=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=aws tag_key=... tag_value=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("aws" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_key")," (required) - the key of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_value")," (required) - the value of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"region")," (optional) - the AWS region to authenticate in."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"addr_type")," (optional) - the type of address to discover: ",(0,i.kt)("inlineCode",{parentName:"li"},"private_v4"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"public_v4"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"public_v6"),". Default is ",(0,i.kt)("inlineCode",{parentName:"li"},"private_v4"),". (>= 1.0)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"access_key_id")," (optional) - the AWS access key for authentication (see below for more information about authenticating)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"secret_access_key")," (optional) - the AWS secret access key for authentication (see below for more information about authenticating).")),(0,i.kt)("h4",{id:"authentication--precedence"},"Authentication & Precedence"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Static credentials ",(0,i.kt)("inlineCode",{parentName:"li"},"access_key_id=... secret_access_key=...")),(0,i.kt)("li",{parentName:"ul"},"Environment variables (",(0,i.kt)("inlineCode",{parentName:"li"},"AWS_ACCESS_KEY_ID")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"AWS_SECRET_ACCESS_KEY"),")"),(0,i.kt)("li",{parentName:"ul"},"Shared credentials file (",(0,i.kt)("inlineCode",{parentName:"li"},"~/.aws/credentials")," or the path specified by ",(0,i.kt)("inlineCode",{parentName:"li"},"AWS_SHARED_CREDENTIALS_FILE"),")"),(0,i.kt)("li",{parentName:"ul"},"ECS task role metadata (container-specific)."),(0,i.kt)("li",{parentName:"ul"},"EC2 instance role metadata.")),(0,i.kt)("p",null,"The only required IAM permission is ",(0,i.kt)("inlineCode",{parentName:"p"},"ec2:DescribeInstances"),", and it is\nrecommended that you make a dedicated key used only for auto-joining. If the\nregion is omitted it will be discovered through the local instance's ",(0,i.kt)("a",{parentName:"p",href:"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html"},"EC2\nmetadata\nendpoint"),"."),(0,i.kt)("h3",{id:"microsoft-azure"},"Microsoft Azure"),(0,i.kt)("p",null,"This returns the first private IP address of all servers in the given region\nwhich have the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value")," in the tenant and subscription, or in\nthe given ",(0,i.kt)("inlineCode",{parentName:"p"},"resource_group")," of a ",(0,i.kt)("inlineCode",{parentName:"p"},"vm_scale_set")," for Virtual Machine Scale Sets."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=azure tag_name=... tag_value=... tenant_id=... client_id=... subscription_id=... secret_access_key=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=azure tag_name=... tag_value=... tenant_id=... client_id=... subscription_id=... secret_access_key=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("azure" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tenant_id")," (required) - the tenant to join machines in."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"client_id")," (required) - the client to authenticate with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"secret_access_key")," (required) - the secret client key. ",(0,i.kt)("strong",{parentName:"li"},"NOTE")," This value often may have an equals sign in it's value, especially if generated from the Azure Portal, so is important to wrap in single quotes eg. ",(0,i.kt)("inlineCode",{parentName:"li"},"secret_acccess_key='fpOfcHQJAQBczjAxiVpeyLmX1M0M0KPBST+GU2GvEN4='"))),(0,i.kt)("p",null,"Variables can also be provided by environmental variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARM_SUBSCRIPTION_ID")," for subscription"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARM_TENANT_ID")," for tenant"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARM_CLIENT_ID")," for client"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARM_CLIENT_SECRET")," for secret access key")),(0,i.kt)("p",null,"Use these configuration parameters when using tags:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_name")," - the name of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_value")," - the value of the tag to auto-join on.")),(0,i.kt)("p",null,"Use these configuration parameters (instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value"),") when using Virtual Machine Scale Sets (Dkron 1.0.3 and later):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resource_group")," - the name of the resource group to filter on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"vm_scale_set")," - the name of the virtual machine scale set to filter on.")),(0,i.kt)("p",null,"When using tags the only permission needed is ",(0,i.kt)("inlineCode",{parentName:"p"},"Microsoft.Network/networkInterfaces"),"."),(0,i.kt)("p",null,"When using Virtual Machine Scale Sets the only role action needed is ",(0,i.kt)("inlineCode",{parentName:"p"},"Microsoft.Compute/virtualMachineScaleSets/*/read"),"."),(0,i.kt)("h3",{id:"google-compute-engine"},"Google Compute Engine"),(0,i.kt)("p",null,"This returns the first private IP address of all servers in the given\nproject which have the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=gce project_name=... tag_value=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry_join: ["provider=gce project_name=... tag_value=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("gce" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_value")," (required) - the value of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"project_name")," (optional) - the name of the project to auto-join on. Discovered if not set."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zone_pattern")," (optional) - the list of zones can be restricted through an RE2 compatible regular expression. If omitted, servers in all zones are returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"credentials_file")," (optional) - the credentials file for authentication. Note, if you set ",(0,i.kt)("inlineCode",{parentName:"li"},"-config-dir")," do not store the credentials.json file in the configuration directory as it will be parsed as a config file and Dkron will fail to start. See below for more information.")),(0,i.kt)("h4",{id:"authentication--precedence-1"},"Authentication & Precedence"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use credentials from ",(0,i.kt)("inlineCode",{parentName:"li"},"credentials_file"),", if provided."),(0,i.kt)("li",{parentName:"ul"},"Use JSON file from ",(0,i.kt)("inlineCode",{parentName:"li"},"GOOGLE_APPLICATION_CREDENTIALS")," environment variable."),(0,i.kt)("li",{parentName:"ul"},"Use JSON file in a location known to the gcloud command-line tool.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"On Windows, this is ",(0,i.kt)("inlineCode",{parentName:"li"},"%APPDATA%/gcloud/application_default_credentials.json"),"."),(0,i.kt)("li",{parentName:"ul"},"On other systems, ",(0,i.kt)("inlineCode",{parentName:"li"},"$HOME/.config/gcloud/application_default_credentials.json"),"."))),(0,i.kt)("li",{parentName:"ul"},"On Google Compute Engine, use credentials from the metadata\nserver. In this final case any provided scopes are ignored.")),(0,i.kt)("p",null,"Discovery requires a ",(0,i.kt)("a",{parentName:"p",href:"https://cloud.google.com/compute/docs/access/service-accounts"},"GCE Service\nAccount"),".\nCredentials are searched using the following paths, in order of precedence."),(0,i.kt)("h3",{id:"ibm-softlayer"},"IBM SoftLayer"),(0,i.kt)("p",null,"This returns the first private IP address of all servers for the given\ndatacenter with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=softlayer datacenter=... tag_value=... username=... api_key=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=softlayer datacenter=... tag_value=... username=... api_key=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("softlayer" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{name:"sl_datacenter"}),(0,i.kt)("a",{href:"#sl_datacenter"},(0,i.kt)("code",null,"datacenter"))," (required) - the name of the datacenter to auto-join in."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_value")," (required) - the value of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"username")," (required) - the username to use for auth."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"api_key")," (required) - the api key to use for auth.")),(0,i.kt)("h3",{id:"aliyun-alibaba-cloud"},"Aliyun (Alibaba Cloud)"),(0,i.kt)("p",null,"This returns the first private IP address of all servers for the given\n",(0,i.kt)("inlineCode",{parentName:"p"},"region")," with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=aliyun region=... tag_key=dkron tag_value=... access_key_id=... access_key_secret=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=aliyun region=... tag_key=dkron tag_value=... access_key_id=... access_key_secret=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("aliyun" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"region")," (required) - the name of the region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_key")," (required) - the key of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_value")," (required) - the value of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"access_key_id")," (required) -the access key to use for auth."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"access_key_secret")," (required) - the secret key to use for auth.")),(0,i.kt)("p",null,"The required RAM permission is ",(0,i.kt)("inlineCode",{parentName:"p"},"ecs:DescribeInstances"),".\nIt is recommended you make a dedicated key used only for auto-joining."),(0,i.kt)("h3",{id:"digital-ocean"},"Digital Ocean"),(0,i.kt)("p",null,"This returns the first private IP address of all servers for the given\n",(0,i.kt)("inlineCode",{parentName:"p"},"region")," with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_name"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=digitalocean region=... tag_name=... api_token=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=digitalocean region=... tag_name=... api_token=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("digitalocean" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"region")," (required) - the name of the region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_name")," (required) - the value of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"api_token")," (required) -the token to use for auth.")),(0,i.kt)("h3",{id:"openstack"},"Openstack"),(0,i.kt)("p",null,"This returns the first private IP address of all servers for the given\n",(0,i.kt)("inlineCode",{parentName:"p"},"region")," with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=os tag_key=dkron tag_value=server username=... password=... auth_url=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=os tag_key=dkron tag_value=server username=... password=... auth_url=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("os" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_key")," (required) - the key of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_value")," (required) - the value of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"project_id")," (optional) - the id of the project (tenant id)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"username")," (optional) - the username to use for auth."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," (optional) - the password to use for auth."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token")," (optional) - the token to use for auth."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auth_url")," (optional) - the identity endpoint to use for auth."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"insecure")," (optional) - indicates whether the API certificate should not be checked. Any value means ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,i.kt)("p",null,"The configuration can also be provided by environment variables."),(0,i.kt)("h3",{id:"scaleway"},"Scaleway"),(0,i.kt)("p",null,"This returns the first private IP address of all servers for the given\n",(0,i.kt)("inlineCode",{parentName:"p"},"region")," with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_name"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=scaleway organization=my-org tag_name=dkron-server token=... region=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=scaleway organization=my-org tag_name=dkron-server token=... region=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("scaleway" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"region")," (required) - the name of the region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_name")," (required) - the name of the tag to auto-join on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"organization")," (required) - the organization access key to use for auth (equal to access key)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token")," (required) - the token to use for auth.")),(0,i.kt)("h3",{id:"joyent-triton"},"Joyent Triton"),(0,i.kt)("p",null,"This returns the first PrimaryIP addresses for all servers with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=triton account=testaccount url=https://us-sw-1.api.joyentcloud.com key_id=... tag_key=dkron-role tag_value=server"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=triton account=testaccount url=https://us-sw-1.api.joyentcloud.com key_id=... tag_key=dkron-role tag_value=server"]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) - the name of the provider ("triton" in this case).'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"account")," (required) - the name of the account."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," (required) - the URL of the Triton api endpoint to use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key_id")," (required) - the key id to use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_key")," (optional) - the instance tag key to use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_value")," (optional) - the tag value to use.")),(0,i.kt)("h3",{id:"vsphere"},"vSphere"),(0,i.kt)("p",null,"This returns the first private IP address of all servers for the given region with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"category_name"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=vsphere category_name=dkron-role tag_name=dkron-server host=... user=... password=... insecure_ssl=[true|false]"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=vsphere category_name=dkron-role tag_name=dkron-server host=... user=... password=... insecure_ssl=[true|false]"]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required) -   the name of the provider ("vsphere" is the provider here)'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag_name")," (required) -    The name of the tag to look up."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"category_name")," (required) - The category of the tag to look up."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," (required) -        The host of the vSphere server to connect to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," (required) -         The username to connect as."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," (required) -     The password of the user to connect to vSphere as."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"insecure_ssl")," (optional) -  Whether or not to skip SSL certificate validation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout")," (optional) -     Discovery context timeout (default: 10m)")),(0,i.kt)("h3",{id:"packet"},"Packet"),(0,i.kt)("p",null,"This returns the first private IP address (or the IP address of ",(0,i.kt)("inlineCode",{parentName:"p"},"address type"),") of all servers with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"project")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"auth_token"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=packet auth_token=token project=uuid url=... address_type=..."\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=packet auth_token=token project=uuid url=... address_type=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required)\t-\tthe name of the provider ("packet" is the provider here)'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"project")," (required) \t- \tthe UUID of packet project"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auth_token")," (required) -  the authentication token for packet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," (optional) - \t\t a REST URL for packet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address_type"),' (optional) - the type of address to check for in this provider  ("private_v4", "public_v4" or "public_v6".                                   Defaults to "private_v4")')),(0,i.kt)("h3",{id:"kubernetes-k8s"},"Kubernetes (k8s)"),(0,i.kt)("p",null,"The Kubernetes provider finds the IP addresses of pods with the matching\n",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"},"label or field selector"),".\nThis is useful for non-Kubernetes agents that are joining a server cluster\nrunning within Kubernetes."),(0,i.kt)("p",null,"The pod IP is used by default, which requires that the agent connecting can\nnetwork to the pod IP. The ",(0,i.kt)("inlineCode",{parentName:"p"},"host_network")," boolean can be set to true to use\nthe host IP instead, but this requires the agent ports (Gossip, RPC, etc.)\nto be exported to the host as well."),(0,i.kt)("p",null,"By default, no port is specified. This causes Dkron to use the default\ngossip port (default behavior with all join requests). The pod may specify\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"dkron.hashicorp.com/auto-join-port")," annotation to set the port. The value\nmay be an integer or a named port."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ dkron agent --retry-join "provider=k8s label_selector=\\"app=dkron,component=server\\""\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'retry-join: ["provider=k8s label_selector=..."]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provider"),' (required)\t-\tthe name of the provider ("k8s" is the provider here)'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kubeconfig")," (optional) \t- \tpath to the kubeconfig file. If this isn't\nset, then in-cluster auth will be attempted. If that fails, the default\nkubeconfig paths are tried (",(0,i.kt)("inlineCode",{parentName:"li"},"$HOME/.kube/config"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespace")," (optional) -  the namespace to search for pods. If this isn't\nset, it defaults to all namespaces."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label_selector")," (optional) - the label selector for matching pods."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"field_selector")," (optional) - the field selector for matching pods.")))}k.isMDXComponent=!0}}]);