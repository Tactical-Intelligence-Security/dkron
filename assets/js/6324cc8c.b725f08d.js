"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2283],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(h,a(a({ref:n},c),{},{components:t})):r.createElement(h,a({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},44602:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),a=["components"],s={title:"Cron spec",weight:20},l=void 0,u={unversionedId:"usage/cron-spec",id:"version-v2/usage/cron-spec",title:"Cron spec",description:"CRON Expression Format",source:"@site/versioned_docs/version-v2/usage/cron-spec.md",sourceDirName:"usage",slug:"/usage/cron-spec",permalink:"/docs/v2/usage/cron-spec",editUrl:"https://github.com/distribworks/dkron/tree/main/website/docs/versioned_docs/version-v2/usage/cron-spec.md",tags:[],version:"v2",frontMatter:{title:"Cron spec",weight:20},sidebar:"tutorialSidebar",previous:{title:"Concurrency",permalink:"/docs/v2/usage/concurrency"},next:{title:"Use with AWS ECS",permalink:"/docs/v2/usage/ecs"}},c={},p=[{value:"CRON Expression Format",id:"cron-expression-format",level:2},{value:"Predefined schedules",id:"predefined-schedules",level:3},{value:"Intervals",id:"intervals",level:3},{value:"Fixed times",id:"fixed-times",level:3},{value:"Time zones",id:"time-zones",level:3}],d={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"cron-expression-format"},"CRON Expression Format"),(0,o.kt)("p",null,"A cron expression represents a set of times, using 6 space-separated fields."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Field name   | Mandatory? | Allowed values  | Allowed special characters\n----------   | ---------- | --------------  | --------------------------\nSeconds      | Yes        | 0-59            | * / , -\nMinutes      | Yes        | 0-59            | * / , -\nHours        | Yes        | 0-23            | * / , -\nDay of month | Yes        | 1-31            | * / , - ?\nMonth        | Yes        | 1-12 or JAN-DEC | * / , -\nDay of week  | Yes        | 0-6 or SUN-SAT  | * / , - ?\n")),(0,o.kt)("p",null,'Note: Month and Day-of-week field values are case insensitive.  "SUN", "Sun",\nand "sun" are equally accepted.'),(0,o.kt)("p",null,"Special Characters"),(0,o.kt)("p",null,"Asterisk ( * )"),(0,o.kt)("p",null,"The asterisk indicates that the cron expression will match for all values of the\nfield; e.g., using an asterisk in the 5th field (month) would indicate every\nmonth."),(0,o.kt)("p",null,"Slash ( / )"),(0,o.kt)("p",null,'Slashes are used to describe increments of ranges. For example 3-59/15 in the\n1st field (minutes) would indicate the 3rd minute of the hour and every 15\nminutes thereafter. The form "*\\/..." is equivalent to the form "first-last/...",\nthat is, an increment over the largest possible range of the field.  The form\n"N/..." is accepted as meaning "N-MAX/...", that is, starting at N, use the\nincrement until the end of that specific range.  It does not wrap around.'),(0,o.kt)("p",null,"Comma ( , )"),(0,o.kt)("p",null,'Commas are used to separate items of a list. For example, using "MON,WED,FRI" in\nthe 5th field (day of week) would mean Mondays, Wednesdays and Fridays.'),(0,o.kt)("p",null,"Hyphen ( - )"),(0,o.kt)("p",null,"Hyphens are used to define ranges. For example, 9-17 would indicate every\nhour between 9am and 5pm inclusive."),(0,o.kt)("p",null,"Question mark ( ? )"),(0,o.kt)("p",null,"Question mark may be used instead of '*' for leaving either day-of-month or\nday-of-week blank."),(0,o.kt)("h3",{id:"predefined-schedules"},"Predefined schedules"),(0,o.kt)("p",null,"You may use one of several pre-defined schedules in place of a cron expression."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Entry                  | Description                                | Equivalent To\n-----                  | -----------                                | -------------\n@yearly (or @annually) | Run once a year, midnight, Jan. 1st        | 0 0 0 1 1 *\n@monthly               | Run once a month, midnight, first of month | 0 0 0 1 * *\n@weekly                | Run once a week, midnight on Sunday        | 0 0 0 * * 0\n@daily (or @midnight)  | Run once a day, midnight                   | 0 0 0 * * *\n@hourly                | Run once an hour, beginning of hour        | 0 0 * * * *\n@minutely              | Run once a minute, beginning of minute     | 0 * * * * *\n@manually              | Never runs                                 | N/A\n")),(0,o.kt)("h3",{id:"intervals"},"Intervals"),(0,o.kt)("p",null,"You may also schedule a job to execute at fixed intervals.  This is supported by\nformatting the cron spec like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"@every <duration>\n")),(0,o.kt)("p",null,'where "duration" is a string accepted by time.ParseDuration\n(',(0,o.kt)("a",{parentName:"p",href:"http://golang.org/pkg/time/#ParseDuration"},"http://golang.org/pkg/time/#ParseDuration"),")."),(0,o.kt)("p",null,'For example, "@every 1h30m10s" would indicate a schedule that activates every\n1 hour, 30 minutes, 10 seconds.'),(0,o.kt)("p",null,"Note: The interval does not take the job runtime into account.  For example,\nif a job takes 3 minutes to run, and it is scheduled to run every 5 minutes,\nit will have only 2 minutes of idle time between each run."),(0,o.kt)("h3",{id:"fixed-times"},"Fixed times"),(0,o.kt)("p",null,"You may also want to schedule a job to be executed once. This is supported by\nformatting the cron spec like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"@at <datetime>\n")),(0,o.kt)("p",null,'Where "datetime" is a string accepted by time.Parse in RFC3339 format\n(',(0,o.kt)("a",{parentName:"p",href:"https://golang.org/pkg/time/#Parse"},"https://golang.org/pkg/time/#Parse"),")."),(0,o.kt)("p",null,'For example, "@at 2018-01-02T15:04:00Z" would run the job on the specified date and time\nassuming UTC timezone.'),(0,o.kt)("h3",{id:"time-zones"},"Time zones"),(0,o.kt)("p",null,"Dkron is able to schedule jobs in time zones, if you specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"timezone")," parameter in a\njob definition."),(0,o.kt)("p",null,"If the time zone is not specified, the following rules apply:"),(0,o.kt)("p",null,"All interpretation and scheduling is done in the machine's local time zone (as\nprovided by the Go time package (",(0,o.kt)("a",{parentName:"p",href:"http://www.golang.org/pkg/time"},"http://www.golang.org/pkg/time"),")."),(0,o.kt)("p",null,"Be aware that jobs scheduled during daylight-savings leap-ahead transitions will\nnot be run!"),(0,o.kt)("p",null,"If you specify ",(0,o.kt)("inlineCode",{parentName:"p"},"timezone")," the job will be scheduled taking into account daylight-savings\nand leap-ahead transitions, running the job in the actual time in the specified time zone."))}m.isMDXComponent=!0}}]);